// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tcp3.proto

/*
Package tcp is a generated protocol buffer package.

It is generated from these files:
	tcp3.proto

It has these top-level messages:
	EndPoint
	InetSocketIDProto
	InetDiagMsgProto
	TCPVegasInfoProto
	DCTCPInfoProto
	SocketMemInfoProto
	MemInfoProto
	BBRInfoProto
	TCPInfoProto
	TCPDiagnosticsProto
*/
package tcp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// https://datatracker.ietf.org/doc/draft-ietf-tcpm-rfc793bis/
type TCPState int32

const (
	TCPState_INVALID     TCPState = 0
	TCPState_ESTABLISHED TCPState = 1
	TCPState_SYN_SENT    TCPState = 2
	TCPState_SYN_RECV    TCPState = 3
	TCPState_FIN_WAIT1   TCPState = 4
	TCPState_FIN_WAIT2   TCPState = 5
	TCPState_TIME_WAIT   TCPState = 6
	TCPState_CLOSE       TCPState = 7
	TCPState_CLOSE_WAIT  TCPState = 8
	TCPState_LAST_ACK    TCPState = 9
	TCPState_LISTEN      TCPState = 10
	TCPState_CLOSING     TCPState = 11
)

var TCPState_name = map[int32]string{
	0:  "INVALID",
	1:  "ESTABLISHED",
	2:  "SYN_SENT",
	3:  "SYN_RECV",
	4:  "FIN_WAIT1",
	5:  "FIN_WAIT2",
	6:  "TIME_WAIT",
	7:  "CLOSE",
	8:  "CLOSE_WAIT",
	9:  "LAST_ACK",
	10: "LISTEN",
	11: "CLOSING",
}
var TCPState_value = map[string]int32{
	"INVALID":     0,
	"ESTABLISHED": 1,
	"SYN_SENT":    2,
	"SYN_RECV":    3,
	"FIN_WAIT1":   4,
	"FIN_WAIT2":   5,
	"TIME_WAIT":   6,
	"CLOSE":       7,
	"CLOSE_WAIT":  8,
	"LAST_ACK":    9,
	"LISTEN":      10,
	"CLOSING":     11,
}

func (x TCPState) String() string {
	return proto.EnumName(TCPState_name, int32(x))
}
func (TCPState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Protocol int32

const (
	Protocol_IPPROTO_UNUSED Protocol = 0
	Protocol_IPPROTO_TCP    Protocol = 6
	Protocol_IPPROTO_UDP    Protocol = 17
	Protocol_IPPROTO_DCCP   Protocol = 33
)

var Protocol_name = map[int32]string{
	0:  "IPPROTO_UNUSED",
	6:  "IPPROTO_TCP",
	17: "IPPROTO_UDP",
	33: "IPPROTO_DCCP",
}
var Protocol_value = map[string]int32{
	"IPPROTO_UNUSED": 0,
	"IPPROTO_TCP":    6,
	"IPPROTO_UDP":    17,
	"IPPROTO_DCCP":   33,
}

func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}
func (Protocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type InetDiagMsgProto_AddressFamily int32

const (
	// NOTE: these are equivalent to AF_... in socket.h, but cannot have the
	// same names since those are macros and will cause collisions.
	// There are many other families, but for now we only care about these.
	InetDiagMsgProto_UNSPEC InetDiagMsgProto_AddressFamily = 0
	InetDiagMsgProto_INET   InetDiagMsgProto_AddressFamily = 2
	InetDiagMsgProto_INET6  InetDiagMsgProto_AddressFamily = 10
)

var InetDiagMsgProto_AddressFamily_name = map[int32]string{
	0:  "UNSPEC",
	2:  "INET",
	10: "INET6",
}
var InetDiagMsgProto_AddressFamily_value = map[string]int32{
	"UNSPEC": 0,
	"INET":   2,
	"INET6":  10,
}

func (x InetDiagMsgProto_AddressFamily) String() string {
	return proto.EnumName(InetDiagMsgProto_AddressFamily_name, int32(x))
}
func (InetDiagMsgProto_AddressFamily) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 0}
}

type TCPInfoProto_CAState int32

const (
	TCPInfoProto_TCPF_UNUSED      TCPInfoProto_CAState = 0
	TCPInfoProto_TCPF_CA_Open     TCPInfoProto_CAState = 1
	TCPInfoProto_TCPF_CA_Disorder TCPInfoProto_CAState = 2
	TCPInfoProto_TCPF_CA_CWR      TCPInfoProto_CAState = 4
	TCPInfoProto_TCPF_CA_Recovery TCPInfoProto_CAState = 8
	TCPInfoProto_TCPF_CA_Loss     TCPInfoProto_CAState = 16
)

var TCPInfoProto_CAState_name = map[int32]string{
	0:  "TCPF_UNUSED",
	1:  "TCPF_CA_Open",
	2:  "TCPF_CA_Disorder",
	4:  "TCPF_CA_CWR",
	8:  "TCPF_CA_Recovery",
	16: "TCPF_CA_Loss",
}
var TCPInfoProto_CAState_value = map[string]int32{
	"TCPF_UNUSED":      0,
	"TCPF_CA_Open":     1,
	"TCPF_CA_Disorder": 2,
	"TCPF_CA_CWR":      4,
	"TCPF_CA_Recovery": 8,
	"TCPF_CA_Loss":     16,
}

func (x TCPInfoProto_CAState) String() string {
	return proto.EnumName(TCPInfoProto_CAState_name, int32(x))
}
func (TCPInfoProto_CAState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

// #define TCPI_HAS_OPT(info, opt) !!(info->tcpi_options & (opt))
type TCPInfoProto_Options int32

const (
	TCPInfoProto_OPT_UNUSED     TCPInfoProto_Options = 0
	TCPInfoProto_OPT_TIMESTAMPS TCPInfoProto_Options = 1
	TCPInfoProto_OPT_SACK       TCPInfoProto_Options = 2
	TCPInfoProto_OPT_WSCALE     TCPInfoProto_Options = 4
	TCPInfoProto_OPT_ECN        TCPInfoProto_Options = 8
	TCPInfoProto_OPT_ECN_SEEN   TCPInfoProto_Options = 16
	TCPInfoProto_OPT_SYN_DATA   TCPInfoProto_Options = 32
)

var TCPInfoProto_Options_name = map[int32]string{
	0:  "OPT_UNUSED",
	1:  "OPT_TIMESTAMPS",
	2:  "OPT_SACK",
	4:  "OPT_WSCALE",
	8:  "OPT_ECN",
	16: "OPT_ECN_SEEN",
	32: "OPT_SYN_DATA",
}
var TCPInfoProto_Options_value = map[string]int32{
	"OPT_UNUSED":     0,
	"OPT_TIMESTAMPS": 1,
	"OPT_SACK":       2,
	"OPT_WSCALE":     4,
	"OPT_ECN":        8,
	"OPT_ECN_SEEN":   16,
	"OPT_SYN_DATA":   32,
}

func (x TCPInfoProto_Options) String() string {
	return proto.EnumName(TCPInfoProto_Options_name, int32(x))
}
func (TCPInfoProto_Options) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 1} }

type EndPoint struct {
	Port uint32 `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
	Ip   []byte `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *EndPoint) Reset()                    { *m = EndPoint{} }
func (m *EndPoint) String() string            { return proto.CompactTextString(m) }
func (*EndPoint) ProtoMessage()               {}
func (*EndPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EndPoint) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *EndPoint) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

// Using slightly different structure than inet_diag.h.  Oddly, inet_diag.h
// does not specify the connection family in the sockid struct, but instead
// in the inet_diag_msg.  However, in proto land, we can additionally infer
// the family from the number of bytes in EndPoint.ip.
type InetSocketIDProto struct {
	Source      *EndPoint `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Destination *EndPoint `protobuf:"bytes,2,opt,name=destination" json:"destination,omitempty"`
	Interface   uint32    `protobuf:"varint,5,opt,name=interface" json:"interface,omitempty"`
	// Using fixed64, as this is more efficient for hashes, keys, cookies.
	Cookie uint64 `protobuf:"fixed64,6,opt,name=cookie" json:"cookie,omitempty"`
}

func (m *InetSocketIDProto) Reset()                    { *m = InetSocketIDProto{} }
func (m *InetSocketIDProto) String() string            { return proto.CompactTextString(m) }
func (*InetSocketIDProto) ProtoMessage()               {}
func (*InetSocketIDProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InetSocketIDProto) GetSource() *EndPoint {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *InetSocketIDProto) GetDestination() *EndPoint {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *InetSocketIDProto) GetInterface() uint32 {
	if m != nil {
		return m.Interface
	}
	return 0
}

func (m *InetSocketIDProto) GetCookie() uint64 {
	if m != nil {
		return m.Cookie
	}
	return 0
}

type InetDiagMsgProto struct {
	// These are 8 bit unsigned.
	Family  InetDiagMsgProto_AddressFamily `protobuf:"varint,1,opt,name=family,enum=InetDiagMsgProto_AddressFamily" json:"family,omitempty"`
	State   TCPState                       `protobuf:"varint,2,opt,name=state,enum=TCPState" json:"state,omitempty"`
	Timer   uint32                         `protobuf:"varint,3,opt,name=timer" json:"timer,omitempty"`
	Retrans uint32                         `protobuf:"varint,4,opt,name=retrans" json:"retrans,omitempty"`
	SockId  *InetSocketIDProto             `protobuf:"bytes,5,opt,name=sock_id,json=sockId" json:"sock_id,omitempty"`
	Expires uint32                         `protobuf:"varint,6,opt,name=expires" json:"expires,omitempty"`
	Rqueue  uint32                         `protobuf:"varint,7,opt,name=rqueue" json:"rqueue,omitempty"`
	Wqueue  uint32                         `protobuf:"varint,8,opt,name=wqueue" json:"wqueue,omitempty"`
	Uid     uint32                         `protobuf:"varint,9,opt,name=uid" json:"uid,omitempty"`
	Inode   uint32                         `protobuf:"varint,10,opt,name=inode" json:"inode,omitempty"`
}

func (m *InetDiagMsgProto) Reset()                    { *m = InetDiagMsgProto{} }
func (m *InetDiagMsgProto) String() string            { return proto.CompactTextString(m) }
func (*InetDiagMsgProto) ProtoMessage()               {}
func (*InetDiagMsgProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *InetDiagMsgProto) GetFamily() InetDiagMsgProto_AddressFamily {
	if m != nil {
		return m.Family
	}
	return InetDiagMsgProto_UNSPEC
}

func (m *InetDiagMsgProto) GetState() TCPState {
	if m != nil {
		return m.State
	}
	return TCPState_INVALID
}

func (m *InetDiagMsgProto) GetTimer() uint32 {
	if m != nil {
		return m.Timer
	}
	return 0
}

func (m *InetDiagMsgProto) GetRetrans() uint32 {
	if m != nil {
		return m.Retrans
	}
	return 0
}

func (m *InetDiagMsgProto) GetSockId() *InetSocketIDProto {
	if m != nil {
		return m.SockId
	}
	return nil
}

func (m *InetDiagMsgProto) GetExpires() uint32 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func (m *InetDiagMsgProto) GetRqueue() uint32 {
	if m != nil {
		return m.Rqueue
	}
	return 0
}

func (m *InetDiagMsgProto) GetWqueue() uint32 {
	if m != nil {
		return m.Wqueue
	}
	return 0
}

func (m *InetDiagMsgProto) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *InetDiagMsgProto) GetInode() uint32 {
	if m != nil {
		return m.Inode
	}
	return 0
}

// Proto representation for struct tcpvegas_info.
type TCPVegasInfoProto struct {
	// Note that tcpv_enabled is represented by the has_xxx in the parent.
	Rttcnt uint32 `protobuf:"varint,1,opt,name=rttcnt" json:"rttcnt,omitempty"`
	Rtt    uint32 `protobuf:"varint,2,opt,name=rtt" json:"rtt,omitempty"`
	Minrtt uint32 `protobuf:"varint,3,opt,name=minrtt" json:"minrtt,omitempty"`
}

func (m *TCPVegasInfoProto) Reset()                    { *m = TCPVegasInfoProto{} }
func (m *TCPVegasInfoProto) String() string            { return proto.CompactTextString(m) }
func (*TCPVegasInfoProto) ProtoMessage()               {}
func (*TCPVegasInfoProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TCPVegasInfoProto) GetRttcnt() uint32 {
	if m != nil {
		return m.Rttcnt
	}
	return 0
}

func (m *TCPVegasInfoProto) GetRtt() uint32 {
	if m != nil {
		return m.Rtt
	}
	return 0
}

func (m *TCPVegasInfoProto) GetMinrtt() uint32 {
	if m != nil {
		return m.Minrtt
	}
	return 0
}

// Proto representation for struct tcp_dctcp_info.
type DCTCPInfoProto struct {
	// Note that dctcp_enabled is represented by the has_xxx in the parent.
	CeState uint32 `protobuf:"varint,1,opt,name=ce_state,json=ceState" json:"ce_state,omitempty"`
	Alpha   uint32 `protobuf:"varint,2,opt,name=alpha" json:"alpha,omitempty"`
	AbEcn   uint32 `protobuf:"varint,3,opt,name=ab_ecn,json=abEcn" json:"ab_ecn,omitempty"`
	AbTot   uint32 `protobuf:"varint,4,opt,name=ab_tot,json=abTot" json:"ab_tot,omitempty"`
}

func (m *DCTCPInfoProto) Reset()                    { *m = DCTCPInfoProto{} }
func (m *DCTCPInfoProto) String() string            { return proto.CompactTextString(m) }
func (*DCTCPInfoProto) ProtoMessage()               {}
func (*DCTCPInfoProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DCTCPInfoProto) GetCeState() uint32 {
	if m != nil {
		return m.CeState
	}
	return 0
}

func (m *DCTCPInfoProto) GetAlpha() uint32 {
	if m != nil {
		return m.Alpha
	}
	return 0
}

func (m *DCTCPInfoProto) GetAbEcn() uint32 {
	if m != nil {
		return m.AbEcn
	}
	return 0
}

func (m *DCTCPInfoProto) GetAbTot() uint32 {
	if m != nil {
		return m.AbTot
	}
	return 0
}

// Proto for either INET_DIAG_SKMEMINFO
type SocketMemInfoProto struct {
	RmemAlloc  uint32 `protobuf:"varint,1,opt,name=rmem_alloc,json=rmemAlloc" json:"rmem_alloc,omitempty"`
	Rcvbuf     uint32 `protobuf:"varint,2,opt,name=rcvbuf" json:"rcvbuf,omitempty"`
	WmemAlloc  uint32 `protobuf:"varint,3,opt,name=wmem_alloc,json=wmemAlloc" json:"wmem_alloc,omitempty"`
	Sndbuf     uint32 `protobuf:"varint,4,opt,name=sndbuf" json:"sndbuf,omitempty"`
	FwdAlloc   uint32 `protobuf:"varint,5,opt,name=fwd_alloc,json=fwdAlloc" json:"fwd_alloc,omitempty"`
	WmemQueued uint32 `protobuf:"varint,6,opt,name=wmem_queued,json=wmemQueued" json:"wmem_queued,omitempty"`
	Optmem     uint32 `protobuf:"varint,7,opt,name=optmem" json:"optmem,omitempty"`
	Backlog    uint32 `protobuf:"varint,8,opt,name=backlog" json:"backlog,omitempty"`
	Drops      uint32 `protobuf:"varint,9,opt,name=drops" json:"drops,omitempty"`
}

func (m *SocketMemInfoProto) Reset()                    { *m = SocketMemInfoProto{} }
func (m *SocketMemInfoProto) String() string            { return proto.CompactTextString(m) }
func (*SocketMemInfoProto) ProtoMessage()               {}
func (*SocketMemInfoProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SocketMemInfoProto) GetRmemAlloc() uint32 {
	if m != nil {
		return m.RmemAlloc
	}
	return 0
}

func (m *SocketMemInfoProto) GetRcvbuf() uint32 {
	if m != nil {
		return m.Rcvbuf
	}
	return 0
}

func (m *SocketMemInfoProto) GetWmemAlloc() uint32 {
	if m != nil {
		return m.WmemAlloc
	}
	return 0
}

func (m *SocketMemInfoProto) GetSndbuf() uint32 {
	if m != nil {
		return m.Sndbuf
	}
	return 0
}

func (m *SocketMemInfoProto) GetFwdAlloc() uint32 {
	if m != nil {
		return m.FwdAlloc
	}
	return 0
}

func (m *SocketMemInfoProto) GetWmemQueued() uint32 {
	if m != nil {
		return m.WmemQueued
	}
	return 0
}

func (m *SocketMemInfoProto) GetOptmem() uint32 {
	if m != nil {
		return m.Optmem
	}
	return 0
}

func (m *SocketMemInfoProto) GetBacklog() uint32 {
	if m != nil {
		return m.Backlog
	}
	return 0
}

func (m *SocketMemInfoProto) GetDrops() uint32 {
	if m != nil {
		return m.Drops
	}
	return 0
}

// message type for INET_DIAG_MEMINFO.
type MemInfoProto struct {
	Rmem uint32 `protobuf:"varint,1,opt,name=rmem" json:"rmem,omitempty"`
	Wmem uint32 `protobuf:"varint,2,opt,name=wmem" json:"wmem,omitempty"`
	Fmem uint32 `protobuf:"varint,3,opt,name=fmem" json:"fmem,omitempty"`
	Tmem uint32 `protobuf:"varint,4,opt,name=tmem" json:"tmem,omitempty"`
}

func (m *MemInfoProto) Reset()                    { *m = MemInfoProto{} }
func (m *MemInfoProto) String() string            { return proto.CompactTextString(m) }
func (*MemInfoProto) ProtoMessage()               {}
func (*MemInfoProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MemInfoProto) GetRmem() uint32 {
	if m != nil {
		return m.Rmem
	}
	return 0
}

func (m *MemInfoProto) GetWmem() uint32 {
	if m != nil {
		return m.Wmem
	}
	return 0
}

func (m *MemInfoProto) GetFmem() uint32 {
	if m != nil {
		return m.Fmem
	}
	return 0
}

func (m *MemInfoProto) GetTmem() uint32 {
	if m != nil {
		return m.Tmem
	}
	return 0
}

// Proto for struct tcp_bbr_info when INET_DIAG_BBRINFO element is non-null.
type BBRInfoProto struct {
	Bw         uint64 `protobuf:"varint,1,opt,name=bw" json:"bw,omitempty"`
	MinRtt     uint32 `protobuf:"varint,2,opt,name=min_rtt,json=minRtt" json:"min_rtt,omitempty"`
	PacingGain uint32 `protobuf:"varint,3,opt,name=pacing_gain,json=pacingGain" json:"pacing_gain,omitempty"`
	CwndGain   uint32 `protobuf:"varint,4,opt,name=cwnd_gain,json=cwndGain" json:"cwnd_gain,omitempty"`
}

func (m *BBRInfoProto) Reset()                    { *m = BBRInfoProto{} }
func (m *BBRInfoProto) String() string            { return proto.CompactTextString(m) }
func (*BBRInfoProto) ProtoMessage()               {}
func (*BBRInfoProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BBRInfoProto) GetBw() uint64 {
	if m != nil {
		return m.Bw
	}
	return 0
}

func (m *BBRInfoProto) GetMinRtt() uint32 {
	if m != nil {
		return m.MinRtt
	}
	return 0
}

func (m *BBRInfoProto) GetPacingGain() uint32 {
	if m != nil {
		return m.PacingGain
	}
	return 0
}

func (m *BBRInfoProto) GetCwndGain() uint32 {
	if m != nil {
		return m.CwndGain
	}
	return 0
}

// This proto is intended to precisely represent the raw data from tcpinfo.
// (Derived data will be represented in other protos.)
type TCPInfoProto struct {
	// state through rcv_wscale are 7 x _u8
	// TODO - should this actually be here?
	State TCPState `protobuf:"varint,1,opt,name=state,enum=TCPState" json:"state,omitempty"`
	// bitwise OR of CAState enums.
	CaState     uint32 `protobuf:"varint,2,opt,name=ca_state,json=caState" json:"ca_state,omitempty"`
	Retransmits uint32 `protobuf:"varint,3,opt,name=retransmits" json:"retransmits,omitempty"`
	Probes      uint32 `protobuf:"varint,4,opt,name=probes" json:"probes,omitempty"`
	Backoff     uint32 `protobuf:"varint,5,opt,name=backoff" json:"backoff,omitempty"`
	Options     uint32 `protobuf:"varint,6,opt,name=options" json:"options,omitempty"`
	// Here are the 6 OPTs broken out as bools.
	TsOpt   bool `protobuf:"varint,601,opt,name=ts_opt,json=tsOpt" json:"ts_opt,omitempty"`
	SackOpt bool `protobuf:"varint,602,opt,name=sack_opt,json=sackOpt" json:"sack_opt,omitempty"`
	// wscale_opt determines whether snd_wscale and rcv_wscale are populated.
	// So this is actually redundant with has_snd_wscale and has_rcv_wscale.
	WscaleOpt   bool   `protobuf:"varint,603,opt,name=wscale_opt,json=wscaleOpt" json:"wscale_opt,omitempty"`
	EcnOpt      bool   `protobuf:"varint,604,opt,name=ecn_opt,json=ecnOpt" json:"ecn_opt,omitempty"`
	EcnseenOpt  bool   `protobuf:"varint,605,opt,name=ecnseen_opt,json=ecnseenOpt" json:"ecnseen_opt,omitempty"`
	FastopenOpt bool   `protobuf:"varint,606,opt,name=fastopen_opt,json=fastopenOpt" json:"fastopen_opt,omitempty"`
	SndWscale   uint32 `protobuf:"varint,7,opt,name=snd_wscale,json=sndWscale" json:"snd_wscale,omitempty"`
	RcvWscale   uint32 `protobuf:"varint,8,opt,name=rcv_wscale,json=rcvWscale" json:"rcv_wscale,omitempty"`
	// This field was recently added as an eighth u8 immediately following
	// tcpi_xxx_wscale bit fields, so inserting it here.
	DeliveryRateAppLimited bool   `protobuf:"varint,801,opt,name=delivery_rate_app_limited,json=deliveryRateAppLimited" json:"delivery_rate_app_limited,omitempty"`
	Rto                    uint32 `protobuf:"varint,9,opt,name=rto" json:"rto,omitempty"`
	Ato                    uint32 `protobuf:"varint,10,opt,name=ato" json:"ato,omitempty"`
	SndMss                 uint32 `protobuf:"varint,11,opt,name=snd_mss,json=sndMss" json:"snd_mss,omitempty"`
	RcvMss                 uint32 `protobuf:"varint,12,opt,name=rcv_mss,json=rcvMss" json:"rcv_mss,omitempty"`
	Unacked                uint32 `protobuf:"varint,13,opt,name=unacked" json:"unacked,omitempty"`
	Sacked                 uint32 `protobuf:"varint,14,opt,name=sacked" json:"sacked,omitempty"`
	Lost                   uint32 `protobuf:"varint,15,opt,name=lost" json:"lost,omitempty"`
	Retrans                uint32 `protobuf:"varint,16,opt,name=retrans" json:"retrans,omitempty"`
	Fackets                uint32 `protobuf:"varint,17,opt,name=fackets" json:"fackets,omitempty"`
	// Times.
	LastDataSent uint32 `protobuf:"varint,18,opt,name=last_data_sent,json=lastDataSent" json:"last_data_sent,omitempty"`
	LastAckSent  uint32 `protobuf:"varint,19,opt,name=last_ack_sent,json=lastAckSent" json:"last_ack_sent,omitempty"`
	LastDataRecv uint32 `protobuf:"varint,20,opt,name=last_data_recv,json=lastDataRecv" json:"last_data_recv,omitempty"`
	LastAckRecv  uint32 `protobuf:"varint,21,opt,name=last_ack_recv,json=lastAckRecv" json:"last_ack_recv,omitempty"`
	// Metrics.
	Pmtu         uint32 `protobuf:"varint,22,opt,name=pmtu" json:"pmtu,omitempty"`
	RcvSsthresh  uint32 `protobuf:"varint,23,opt,name=rcv_ssthresh,json=rcvSsthresh" json:"rcv_ssthresh,omitempty"`
	Rtt          uint32 `protobuf:"varint,24,opt,name=rtt" json:"rtt,omitempty"`
	Rttvar       uint32 `protobuf:"varint,25,opt,name=rttvar" json:"rttvar,omitempty"`
	SndSsthresh  uint32 `protobuf:"varint,26,opt,name=snd_ssthresh,json=sndSsthresh" json:"snd_ssthresh,omitempty"`
	SndCwnd      uint32 `protobuf:"varint,27,opt,name=snd_cwnd,json=sndCwnd" json:"snd_cwnd,omitempty"`
	Advmss       uint32 `protobuf:"varint,28,opt,name=advmss" json:"advmss,omitempty"`
	Reordering   uint32 `protobuf:"varint,29,opt,name=reordering" json:"reordering,omitempty"`
	RcvRtt       uint32 `protobuf:"varint,30,opt,name=rcv_rtt,json=rcvRtt" json:"rcv_rtt,omitempty"`
	RcvSpace     uint32 `protobuf:"varint,31,opt,name=rcv_space,json=rcvSpace" json:"rcv_space,omitempty"`
	TotalRetrans uint32 `protobuf:"varint,32,opt,name=total_retrans,json=totalRetrans" json:"total_retrans,omitempty"`
	// In tcp code, these four are 64 bit unsigned.  However, the first two are often -1, so use signed.
	PacingRate    int64  `protobuf:"varint,33,opt,name=pacing_rate,json=pacingRate" json:"pacing_rate,omitempty"`
	MaxPacingRate int64  `protobuf:"varint,34,opt,name=max_pacing_rate,json=maxPacingRate" json:"max_pacing_rate,omitempty"`
	BytesAcked    uint64 `protobuf:"varint,35,opt,name=bytes_acked,json=bytesAcked" json:"bytes_acked,omitempty"`
	BytesReceived uint64 `protobuf:"varint,36,opt,name=bytes_received,json=bytesReceived" json:"bytes_received,omitempty"`
	SegsOut       uint32 `protobuf:"varint,37,opt,name=segs_out,json=segsOut" json:"segs_out,omitempty"`
	SegsIn        uint32 `protobuf:"varint,38,opt,name=segs_in,json=segsIn" json:"segs_in,omitempty"`
	NotsentBytes  uint32 `protobuf:"varint,39,opt,name=notsent_bytes,json=notsentBytes" json:"notsent_bytes,omitempty"`
	MinRtt        uint32 `protobuf:"varint,40,opt,name=min_rtt,json=minRtt" json:"min_rtt,omitempty"`
	DataSegsIn    uint32 `protobuf:"varint,41,opt,name=data_segs_in,json=dataSegsIn" json:"data_segs_in,omitempty"`
	DataSegsOut   uint32 `protobuf:"varint,42,opt,name=data_segs_out,json=dataSegsOut" json:"data_segs_out,omitempty"`
	DeliveryRate  uint64 `protobuf:"varint,43,opt,name=delivery_rate,json=deliveryRate" json:"delivery_rate,omitempty"`
	BusyTime      uint64 `protobuf:"varint,44,opt,name=busy_time,json=busyTime" json:"busy_time,omitempty"`
	RwndLimited   uint64 `protobuf:"varint,45,opt,name=rwnd_limited,json=rwndLimited" json:"rwnd_limited,omitempty"`
	SndbufLimited uint64 `protobuf:"varint,46,opt,name=sndbuf_limited,json=sndbufLimited" json:"sndbuf_limited,omitempty"`
}

func (m *TCPInfoProto) Reset()                    { *m = TCPInfoProto{} }
func (m *TCPInfoProto) String() string            { return proto.CompactTextString(m) }
func (*TCPInfoProto) ProtoMessage()               {}
func (*TCPInfoProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TCPInfoProto) GetState() TCPState {
	if m != nil {
		return m.State
	}
	return TCPState_INVALID
}

func (m *TCPInfoProto) GetCaState() uint32 {
	if m != nil {
		return m.CaState
	}
	return 0
}

func (m *TCPInfoProto) GetRetransmits() uint32 {
	if m != nil {
		return m.Retransmits
	}
	return 0
}

func (m *TCPInfoProto) GetProbes() uint32 {
	if m != nil {
		return m.Probes
	}
	return 0
}

func (m *TCPInfoProto) GetBackoff() uint32 {
	if m != nil {
		return m.Backoff
	}
	return 0
}

func (m *TCPInfoProto) GetOptions() uint32 {
	if m != nil {
		return m.Options
	}
	return 0
}

func (m *TCPInfoProto) GetTsOpt() bool {
	if m != nil {
		return m.TsOpt
	}
	return false
}

func (m *TCPInfoProto) GetSackOpt() bool {
	if m != nil {
		return m.SackOpt
	}
	return false
}

func (m *TCPInfoProto) GetWscaleOpt() bool {
	if m != nil {
		return m.WscaleOpt
	}
	return false
}

func (m *TCPInfoProto) GetEcnOpt() bool {
	if m != nil {
		return m.EcnOpt
	}
	return false
}

func (m *TCPInfoProto) GetEcnseenOpt() bool {
	if m != nil {
		return m.EcnseenOpt
	}
	return false
}

func (m *TCPInfoProto) GetFastopenOpt() bool {
	if m != nil {
		return m.FastopenOpt
	}
	return false
}

func (m *TCPInfoProto) GetSndWscale() uint32 {
	if m != nil {
		return m.SndWscale
	}
	return 0
}

func (m *TCPInfoProto) GetRcvWscale() uint32 {
	if m != nil {
		return m.RcvWscale
	}
	return 0
}

func (m *TCPInfoProto) GetDeliveryRateAppLimited() bool {
	if m != nil {
		return m.DeliveryRateAppLimited
	}
	return false
}

func (m *TCPInfoProto) GetRto() uint32 {
	if m != nil {
		return m.Rto
	}
	return 0
}

func (m *TCPInfoProto) GetAto() uint32 {
	if m != nil {
		return m.Ato
	}
	return 0
}

func (m *TCPInfoProto) GetSndMss() uint32 {
	if m != nil {
		return m.SndMss
	}
	return 0
}

func (m *TCPInfoProto) GetRcvMss() uint32 {
	if m != nil {
		return m.RcvMss
	}
	return 0
}

func (m *TCPInfoProto) GetUnacked() uint32 {
	if m != nil {
		return m.Unacked
	}
	return 0
}

func (m *TCPInfoProto) GetSacked() uint32 {
	if m != nil {
		return m.Sacked
	}
	return 0
}

func (m *TCPInfoProto) GetLost() uint32 {
	if m != nil {
		return m.Lost
	}
	return 0
}

func (m *TCPInfoProto) GetRetrans() uint32 {
	if m != nil {
		return m.Retrans
	}
	return 0
}

func (m *TCPInfoProto) GetFackets() uint32 {
	if m != nil {
		return m.Fackets
	}
	return 0
}

func (m *TCPInfoProto) GetLastDataSent() uint32 {
	if m != nil {
		return m.LastDataSent
	}
	return 0
}

func (m *TCPInfoProto) GetLastAckSent() uint32 {
	if m != nil {
		return m.LastAckSent
	}
	return 0
}

func (m *TCPInfoProto) GetLastDataRecv() uint32 {
	if m != nil {
		return m.LastDataRecv
	}
	return 0
}

func (m *TCPInfoProto) GetLastAckRecv() uint32 {
	if m != nil {
		return m.LastAckRecv
	}
	return 0
}

func (m *TCPInfoProto) GetPmtu() uint32 {
	if m != nil {
		return m.Pmtu
	}
	return 0
}

func (m *TCPInfoProto) GetRcvSsthresh() uint32 {
	if m != nil {
		return m.RcvSsthresh
	}
	return 0
}

func (m *TCPInfoProto) GetRtt() uint32 {
	if m != nil {
		return m.Rtt
	}
	return 0
}

func (m *TCPInfoProto) GetRttvar() uint32 {
	if m != nil {
		return m.Rttvar
	}
	return 0
}

func (m *TCPInfoProto) GetSndSsthresh() uint32 {
	if m != nil {
		return m.SndSsthresh
	}
	return 0
}

func (m *TCPInfoProto) GetSndCwnd() uint32 {
	if m != nil {
		return m.SndCwnd
	}
	return 0
}

func (m *TCPInfoProto) GetAdvmss() uint32 {
	if m != nil {
		return m.Advmss
	}
	return 0
}

func (m *TCPInfoProto) GetReordering() uint32 {
	if m != nil {
		return m.Reordering
	}
	return 0
}

func (m *TCPInfoProto) GetRcvRtt() uint32 {
	if m != nil {
		return m.RcvRtt
	}
	return 0
}

func (m *TCPInfoProto) GetRcvSpace() uint32 {
	if m != nil {
		return m.RcvSpace
	}
	return 0
}

func (m *TCPInfoProto) GetTotalRetrans() uint32 {
	if m != nil {
		return m.TotalRetrans
	}
	return 0
}

func (m *TCPInfoProto) GetPacingRate() int64 {
	if m != nil {
		return m.PacingRate
	}
	return 0
}

func (m *TCPInfoProto) GetMaxPacingRate() int64 {
	if m != nil {
		return m.MaxPacingRate
	}
	return 0
}

func (m *TCPInfoProto) GetBytesAcked() uint64 {
	if m != nil {
		return m.BytesAcked
	}
	return 0
}

func (m *TCPInfoProto) GetBytesReceived() uint64 {
	if m != nil {
		return m.BytesReceived
	}
	return 0
}

func (m *TCPInfoProto) GetSegsOut() uint32 {
	if m != nil {
		return m.SegsOut
	}
	return 0
}

func (m *TCPInfoProto) GetSegsIn() uint32 {
	if m != nil {
		return m.SegsIn
	}
	return 0
}

func (m *TCPInfoProto) GetNotsentBytes() uint32 {
	if m != nil {
		return m.NotsentBytes
	}
	return 0
}

func (m *TCPInfoProto) GetMinRtt() uint32 {
	if m != nil {
		return m.MinRtt
	}
	return 0
}

func (m *TCPInfoProto) GetDataSegsIn() uint32 {
	if m != nil {
		return m.DataSegsIn
	}
	return 0
}

func (m *TCPInfoProto) GetDataSegsOut() uint32 {
	if m != nil {
		return m.DataSegsOut
	}
	return 0
}

func (m *TCPInfoProto) GetDeliveryRate() uint64 {
	if m != nil {
		return m.DeliveryRate
	}
	return 0
}

func (m *TCPInfoProto) GetBusyTime() uint64 {
	if m != nil {
		return m.BusyTime
	}
	return 0
}

func (m *TCPInfoProto) GetRwndLimited() uint64 {
	if m != nil {
		return m.RwndLimited
	}
	return 0
}

func (m *TCPInfoProto) GetSndbufLimited() uint64 {
	if m != nil {
		return m.SndbufLimited
	}
	return 0
}

// Parent containing all info gathered through netlink library.
type TCPDiagnosticsProto struct {
	// Info from struct inet_diag_msg, including socket_id;
	InetDiagMsg *InetDiagMsgProto `protobuf:"bytes,1,opt,name=inet_diag_msg,json=inetDiagMsg" json:"inet_diag_msg,omitempty"`
	// From INET_DIAG_PROTOCOL message.
	DiagProtocol Protocol `protobuf:"varint,2,opt,name=diag_protocol,json=diagProtocol,enum=Protocol" json:"diag_protocol,omitempty"`
	// From INET_DIAG_CONG message.
	CongestionAlgorithm string `protobuf:"bytes,3,opt,name=congestion_algorithm,json=congestionAlgorithm" json:"congestion_algorithm,omitempty"`
	// The following three are mutually exclusive, as they provide
	// data from different congestion control strategies.
	//
	// Types that are valid to be assigned to CcInfo:
	//	*TCPDiagnosticsProto_Vegas
	//	*TCPDiagnosticsProto_Dctcp
	//	*TCPDiagnosticsProto_BbrInfo
	CcInfo isTCPDiagnosticsProto_CcInfo `protobuf_oneof:"cc_info"`
	// Data obtained from INET_DIAG_SKMEMINFO.
	SocketMem *SocketMemInfoProto `protobuf:"bytes,7,opt,name=socket_mem,json=socketMem" json:"socket_mem,omitempty"`
	// Data obtained from INET_DIAG_MEMINFO.
	MemInfo *MemInfoProto `protobuf:"bytes,8,opt,name=mem_info,json=memInfo" json:"mem_info,omitempty"`
	// Data obtained from struct tcp_info.
	TcpInfo *TCPInfoProto `protobuf:"bytes,9,opt,name=tcp_info,json=tcpInfo" json:"tcp_info,omitempty"`
	// If there is shutdown info, this is the mask value.
	// Check has_shutdown_mask to determine whether present.
	//
	// Types that are valid to be assigned to Shutdown:
	//	*TCPDiagnosticsProto_ShutdownMask
	Shutdown isTCPDiagnosticsProto_Shutdown `protobuf_oneof:"shutdown"`
}

func (m *TCPDiagnosticsProto) Reset()                    { *m = TCPDiagnosticsProto{} }
func (m *TCPDiagnosticsProto) String() string            { return proto.CompactTextString(m) }
func (*TCPDiagnosticsProto) ProtoMessage()               {}
func (*TCPDiagnosticsProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type isTCPDiagnosticsProto_CcInfo interface {
	isTCPDiagnosticsProto_CcInfo()
}
type isTCPDiagnosticsProto_Shutdown interface {
	isTCPDiagnosticsProto_Shutdown()
}

type TCPDiagnosticsProto_Vegas struct {
	Vegas *TCPVegasInfoProto `protobuf:"bytes,4,opt,name=vegas,oneof"`
}
type TCPDiagnosticsProto_Dctcp struct {
	Dctcp *DCTCPInfoProto `protobuf:"bytes,5,opt,name=dctcp,oneof"`
}
type TCPDiagnosticsProto_BbrInfo struct {
	BbrInfo *BBRInfoProto `protobuf:"bytes,6,opt,name=bbr_info,json=bbrInfo,oneof"`
}
type TCPDiagnosticsProto_ShutdownMask struct {
	ShutdownMask uint32 `protobuf:"varint,10,opt,name=shutdown_mask,json=shutdownMask,oneof"`
}

func (*TCPDiagnosticsProto_Vegas) isTCPDiagnosticsProto_CcInfo()          {}
func (*TCPDiagnosticsProto_Dctcp) isTCPDiagnosticsProto_CcInfo()          {}
func (*TCPDiagnosticsProto_BbrInfo) isTCPDiagnosticsProto_CcInfo()        {}
func (*TCPDiagnosticsProto_ShutdownMask) isTCPDiagnosticsProto_Shutdown() {}

func (m *TCPDiagnosticsProto) GetCcInfo() isTCPDiagnosticsProto_CcInfo {
	if m != nil {
		return m.CcInfo
	}
	return nil
}
func (m *TCPDiagnosticsProto) GetShutdown() isTCPDiagnosticsProto_Shutdown {
	if m != nil {
		return m.Shutdown
	}
	return nil
}

func (m *TCPDiagnosticsProto) GetInetDiagMsg() *InetDiagMsgProto {
	if m != nil {
		return m.InetDiagMsg
	}
	return nil
}

func (m *TCPDiagnosticsProto) GetDiagProtocol() Protocol {
	if m != nil {
		return m.DiagProtocol
	}
	return Protocol_IPPROTO_UNUSED
}

func (m *TCPDiagnosticsProto) GetCongestionAlgorithm() string {
	if m != nil {
		return m.CongestionAlgorithm
	}
	return ""
}

func (m *TCPDiagnosticsProto) GetVegas() *TCPVegasInfoProto {
	if x, ok := m.GetCcInfo().(*TCPDiagnosticsProto_Vegas); ok {
		return x.Vegas
	}
	return nil
}

func (m *TCPDiagnosticsProto) GetDctcp() *DCTCPInfoProto {
	if x, ok := m.GetCcInfo().(*TCPDiagnosticsProto_Dctcp); ok {
		return x.Dctcp
	}
	return nil
}

func (m *TCPDiagnosticsProto) GetBbrInfo() *BBRInfoProto {
	if x, ok := m.GetCcInfo().(*TCPDiagnosticsProto_BbrInfo); ok {
		return x.BbrInfo
	}
	return nil
}

func (m *TCPDiagnosticsProto) GetSocketMem() *SocketMemInfoProto {
	if m != nil {
		return m.SocketMem
	}
	return nil
}

func (m *TCPDiagnosticsProto) GetMemInfo() *MemInfoProto {
	if m != nil {
		return m.MemInfo
	}
	return nil
}

func (m *TCPDiagnosticsProto) GetTcpInfo() *TCPInfoProto {
	if m != nil {
		return m.TcpInfo
	}
	return nil
}

func (m *TCPDiagnosticsProto) GetShutdownMask() uint32 {
	if x, ok := m.GetShutdown().(*TCPDiagnosticsProto_ShutdownMask); ok {
		return x.ShutdownMask
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TCPDiagnosticsProto) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TCPDiagnosticsProto_OneofMarshaler, _TCPDiagnosticsProto_OneofUnmarshaler, _TCPDiagnosticsProto_OneofSizer, []interface{}{
		(*TCPDiagnosticsProto_Vegas)(nil),
		(*TCPDiagnosticsProto_Dctcp)(nil),
		(*TCPDiagnosticsProto_BbrInfo)(nil),
		(*TCPDiagnosticsProto_ShutdownMask)(nil),
	}
}

func _TCPDiagnosticsProto_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TCPDiagnosticsProto)
	// cc_info
	switch x := m.CcInfo.(type) {
	case *TCPDiagnosticsProto_Vegas:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vegas); err != nil {
			return err
		}
	case *TCPDiagnosticsProto_Dctcp:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Dctcp); err != nil {
			return err
		}
	case *TCPDiagnosticsProto_BbrInfo:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BbrInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TCPDiagnosticsProto.CcInfo has unexpected type %T", x)
	}
	// shutdown
	switch x := m.Shutdown.(type) {
	case *TCPDiagnosticsProto_ShutdownMask:
		b.EncodeVarint(10<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ShutdownMask))
	case nil:
	default:
		return fmt.Errorf("TCPDiagnosticsProto.Shutdown has unexpected type %T", x)
	}
	return nil
}

func _TCPDiagnosticsProto_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TCPDiagnosticsProto)
	switch tag {
	case 4: // cc_info.vegas
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TCPVegasInfoProto)
		err := b.DecodeMessage(msg)
		m.CcInfo = &TCPDiagnosticsProto_Vegas{msg}
		return true, err
	case 5: // cc_info.dctcp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DCTCPInfoProto)
		err := b.DecodeMessage(msg)
		m.CcInfo = &TCPDiagnosticsProto_Dctcp{msg}
		return true, err
	case 6: // cc_info.bbr_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BBRInfoProto)
		err := b.DecodeMessage(msg)
		m.CcInfo = &TCPDiagnosticsProto_BbrInfo{msg}
		return true, err
	case 10: // shutdown.shutdown_mask
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Shutdown = &TCPDiagnosticsProto_ShutdownMask{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _TCPDiagnosticsProto_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TCPDiagnosticsProto)
	// cc_info
	switch x := m.CcInfo.(type) {
	case *TCPDiagnosticsProto_Vegas:
		s := proto.Size(x.Vegas)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TCPDiagnosticsProto_Dctcp:
		s := proto.Size(x.Dctcp)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TCPDiagnosticsProto_BbrInfo:
		s := proto.Size(x.BbrInfo)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// shutdown
	switch x := m.Shutdown.(type) {
	case *TCPDiagnosticsProto_ShutdownMask:
		n += proto.SizeVarint(10<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ShutdownMask))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*EndPoint)(nil), "EndPoint")
	proto.RegisterType((*InetSocketIDProto)(nil), "InetSocketIDProto")
	proto.RegisterType((*InetDiagMsgProto)(nil), "InetDiagMsgProto")
	proto.RegisterType((*TCPVegasInfoProto)(nil), "TCPVegasInfoProto")
	proto.RegisterType((*DCTCPInfoProto)(nil), "DCTCPInfoProto")
	proto.RegisterType((*SocketMemInfoProto)(nil), "SocketMemInfoProto")
	proto.RegisterType((*MemInfoProto)(nil), "MemInfoProto")
	proto.RegisterType((*BBRInfoProto)(nil), "BBRInfoProto")
	proto.RegisterType((*TCPInfoProto)(nil), "TCPInfoProto")
	proto.RegisterType((*TCPDiagnosticsProto)(nil), "TCPDiagnosticsProto")
	proto.RegisterEnum("TCPState", TCPState_name, TCPState_value)
	proto.RegisterEnum("Protocol", Protocol_name, Protocol_value)
	proto.RegisterEnum("InetDiagMsgProto_AddressFamily", InetDiagMsgProto_AddressFamily_name, InetDiagMsgProto_AddressFamily_value)
	proto.RegisterEnum("TCPInfoProto_CAState", TCPInfoProto_CAState_name, TCPInfoProto_CAState_value)
	proto.RegisterEnum("TCPInfoProto_Options", TCPInfoProto_Options_name, TCPInfoProto_Options_value)
}

func init() { proto.RegisterFile("tcp3.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1930 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x57, 0xdb, 0x92, 0xdb, 0xb8,
	0x11, 0xb5, 0xe6, 0x22, 0x51, 0xad, 0xcb, 0xd0, 0xb0, 0x77, 0x97, 0x5e, 0xaf, 0xd7, 0x63, 0x79,
	0xbd, 0x3b, 0xb1, 0x13, 0x55, 0x76, 0xb6, 0x92, 0x54, 0xe5, 0x4d, 0xc3, 0x91, 0xd7, 0xaa, 0xcc,
	0x68, 0x14, 0x4a, 0xb6, 0x2b, 0x79, 0x08, 0x0b, 0x02, 0x21, 0x99, 0x35, 0x22, 0xc0, 0x10, 0x90,
	0x64, 0x57, 0xf2, 0x01, 0xf9, 0x85, 0x3c, 0xe6, 0x1b, 0xf2, 0x1b, 0xf9, 0x81, 0x5c, 0xff, 0x20,
	0xaf, 0x79, 0x4e, 0x35, 0x00, 0xea, 0x12, 0x57, 0xde, 0xd8, 0xa7, 0x0f, 0x1a, 0x0d, 0xf4, 0x41,
	0x03, 0x04, 0xd0, 0x2c, 0xff, 0xae, 0x9b, 0x17, 0x52, 0xcb, 0x4e, 0x17, 0xbc, 0xbe, 0x48, 0x46,
	0x32, 0x15, 0x9a, 0x10, 0x38, 0xca, 0x65, 0xa1, 0x83, 0xca, 0x69, 0xe5, 0xac, 0x15, 0x99, 0x6f,
	0xd2, 0x86, 0x83, 0x34, 0x0f, 0x0e, 0x4e, 0x2b, 0x67, 0xcd, 0xe8, 0x20, 0xcd, 0x3b, 0x7f, 0xac,
	0xc0, 0xdd, 0x81, 0xe0, 0x7a, 0x2c, 0xd9, 0x2d, 0xd7, 0x83, 0xcb, 0x11, 0x46, 0x21, 0x4f, 0xa0,
	0xaa, 0xe4, 0xb2, 0x60, 0xdc, 0x8c, 0x6d, 0x9c, 0xd7, 0xbb, 0x65, 0xd0, 0xc8, 0x39, 0xc8, 0x0b,
	0x68, 0x24, 0x5c, 0xe9, 0x54, 0x50, 0x9d, 0x4a, 0x61, 0x22, 0xee, 0xf1, 0x76, 0xbd, 0xe4, 0x0b,
	0xa8, 0xa7, 0x42, 0xf3, 0x62, 0x46, 0x19, 0x0f, 0x8e, 0x4d, 0x3a, 0x5b, 0x80, 0x7c, 0x0a, 0x55,
	0x26, 0xe5, 0x6d, 0xca, 0x83, 0xea, 0x69, 0xe5, 0xac, 0x1a, 0x39, 0xab, 0xf3, 0xef, 0x03, 0xf0,
	0x31, 0xb7, 0xcb, 0x94, 0xce, 0xaf, 0xd5, 0xdc, 0xa6, 0xf6, 0x33, 0xa8, 0xce, 0x68, 0x96, 0x2e,
	0x3e, 0x98, 0xd4, 0xda, 0xe7, 0x8f, 0xbb, 0xff, 0x4b, 0xe9, 0xf6, 0x92, 0xa4, 0xe0, 0x4a, 0xbd,
	0x34, 0xb4, 0xc8, 0xd1, 0xc9, 0x63, 0x38, 0x56, 0x9a, 0x6a, 0x6e, 0x52, 0x6d, 0x9f, 0xd7, 0xbb,
	0x93, 0x70, 0x34, 0x46, 0x20, 0xb2, 0x38, 0xb9, 0x0f, 0xc7, 0x3a, 0xcd, 0x78, 0x11, 0x1c, 0x9a,
	0x04, 0xad, 0x41, 0x02, 0xa8, 0x15, 0x5c, 0x17, 0x54, 0xa8, 0xe0, 0xc8, 0xe0, 0xa5, 0x49, 0x5e,
	0x40, 0x4d, 0x49, 0x76, 0x1b, 0xa7, 0x89, 0x59, 0x52, 0xe3, 0x9c, 0x74, 0x3f, 0xda, 0x49, 0xdc,
	0x2e, 0x76, 0x3b, 0x48, 0x30, 0x0c, 0x7f, 0x9f, 0xa7, 0x05, 0x57, 0x66, 0x91, 0xad, 0xa8, 0x34,
	0x71, 0xf5, 0xc5, 0x6f, 0x97, 0x7c, 0xc9, 0x83, 0x9a, 0x71, 0x38, 0x0b, 0xf1, 0xb5, 0xc5, 0x3d,
	0x8b, 0x5b, 0x8b, 0xf8, 0x70, 0xb8, 0x4c, 0x93, 0xa0, 0x6e, 0x40, 0xfc, 0xc4, 0xc4, 0x53, 0x21,
	0x13, 0x1e, 0x80, 0x4d, 0xdc, 0x18, 0x9d, 0x1f, 0x43, 0x6b, 0x6f, 0x23, 0x08, 0x40, 0xf5, 0xf5,
	0x70, 0x3c, 0xea, 0x87, 0xfe, 0x1d, 0xe2, 0xc1, 0xd1, 0x60, 0xd8, 0x9f, 0xf8, 0x07, 0xa4, 0x0e,
	0xc7, 0xf8, 0xf5, 0x53, 0x1f, 0x3a, 0xaf, 0xe1, 0xee, 0x24, 0x1c, 0xbd, 0xe1, 0x73, 0xaa, 0x06,
	0x62, 0x26, 0xed, 0x7e, 0x63, 0x7a, 0x5a, 0x33, 0x51, 0xca, 0xc8, 0x59, 0x98, 0x46, 0xa1, 0xb5,
	0xd9, 0xcc, 0x56, 0x84, 0x9f, 0xc8, 0xcc, 0x52, 0x81, 0xa0, 0xdd, 0x40, 0x67, 0x75, 0x24, 0xb4,
	0x2f, 0xc3, 0x49, 0x38, 0xda, 0xc6, 0x7c, 0x00, 0x1e, 0xe3, 0xb1, 0xad, 0x86, 0x8d, 0x5a, 0x63,
	0x7c, 0x5c, 0x16, 0x81, 0x2e, 0xf2, 0x77, 0xd4, 0x05, 0xb6, 0x06, 0xf9, 0x04, 0xaa, 0x74, 0x1a,
	0x73, 0x26, 0xca, 0xda, 0xd0, 0x69, 0x9f, 0x09, 0x07, 0x6b, 0xa9, 0x5d, 0x69, 0x8e, 0xe9, 0x74,
	0x22, 0x75, 0xe7, 0x0f, 0x07, 0x40, 0x6c, 0x15, 0xae, 0x79, 0xb6, 0x9d, 0xf5, 0x11, 0x40, 0x91,
	0xf1, 0x2c, 0xa6, 0x8b, 0x85, 0x64, 0x6e, 0xde, 0x3a, 0x22, 0x3d, 0x04, 0xcc, 0x42, 0xd9, 0x6a,
	0xba, 0x9c, 0xb9, 0xa9, 0x9d, 0x85, 0xc3, 0xd6, 0xdb, 0x61, 0x76, 0xfe, 0xfa, 0x7a, 0x77, 0x98,
	0x12, 0x09, 0x0e, 0xb3, 0x39, 0x38, 0x8b, 0x3c, 0x84, 0xfa, 0x6c, 0x9d, 0xb8, 0x51, 0x56, 0xf2,
	0xde, 0x6c, 0x9d, 0xd8, 0x41, 0x8f, 0xa1, 0x61, 0x62, 0x9a, 0x8a, 0x26, 0x4e, 0x11, 0x66, 0x9a,
	0x5f, 0x1a, 0x04, 0xa3, 0xca, 0x5c, 0x67, 0x3c, 0x2b, 0x45, 0x61, 0x2d, 0x94, 0xd1, 0x94, 0xb2,
	0xdb, 0x85, 0x9c, 0x3b, 0x55, 0x94, 0x26, 0x6e, 0x5c, 0x52, 0xc8, 0x5c, 0x39, 0x61, 0x58, 0xa3,
	0xf3, 0x1b, 0x68, 0xee, 0xed, 0x01, 0x81, 0x23, 0x5c, 0x71, 0xd9, 0x12, 0xf0, 0x1b, 0x31, 0x9c,
	0xd9, 0x2d, 0xdb, 0x7c, 0x23, 0x36, 0x43, 0xcc, 0x2e, 0xd7, 0x7c, 0x23, 0x66, 0x32, 0xb2, 0xeb,
	0x34, 0xdf, 0x9d, 0x25, 0x34, 0x2f, 0x2e, 0xa2, 0x6d, 0xfc, 0x36, 0x1c, 0x4c, 0xd7, 0x26, 0xfa,
	0x51, 0x74, 0x30, 0x5d, 0x93, 0xcf, 0xa0, 0x96, 0xa5, 0x22, 0xde, 0x2a, 0x05, 0x45, 0x11, 0x69,
	0x8d, 0x3b, 0x90, 0x53, 0x96, 0x8a, 0x79, 0x3c, 0xa7, 0x69, 0x59, 0x56, 0xb0, 0xd0, 0xf7, 0x34,
	0x15, 0xb8, 0x7f, 0x6c, 0x2d, 0x12, 0xeb, 0xb6, 0x53, 0x7a, 0x08, 0xa0, 0xb3, 0xf3, 0x97, 0x36,
	0x34, 0xf7, 0x14, 0xb5, 0x39, 0xdc, 0x95, 0xff, 0x73, 0xb8, 0x51, 0x72, 0x34, 0xde, 0x36, 0x00,
	0x94, 0x1c, 0xb5, 0x92, 0x3b, 0x85, 0x86, 0x3b, 0xd2, 0x59, 0xaa, 0x95, 0x4b, 0x65, 0x17, 0xc2,
	0x6a, 0xe4, 0x85, 0x9c, 0xf2, 0xb2, 0x05, 0x38, 0xab, 0xac, 0x86, 0x9c, 0xcd, 0x5c, 0x85, 0x4b,
	0x13, 0x3d, 0x32, 0xc7, 0xd6, 0xb7, 0x39, 0xee, 0xce, 0xc4, 0x58, 0x5a, 0xc5, 0x32, 0xd7, 0xc1,
	0x5f, 0x31, 0x98, 0x17, 0x1d, 0x6b, 0x75, 0x93, 0x6b, 0xf2, 0x39, 0x78, 0x8a, 0xb2, 0x5b, 0xe3,
	0xf9, 0x9b, 0xf5, 0xd4, 0x10, 0x40, 0xdf, 0x97, 0x00, 0x6b, 0xc5, 0xe8, 0x82, 0x1b, 0xef, 0xdf,
	0xad, 0xb7, 0x6e, 0x21, 0xf4, 0x63, 0x73, 0x61, 0xc2, 0x38, 0xff, 0x61, 0x9d, 0x55, 0xce, 0x04,
	0x7a, 0x4e, 0xa1, 0xc1, 0x99, 0x50, 0x9c, 0x5b, 0xef, 0x3f, 0xad, 0x17, 0x1c, 0x86, 0x8c, 0x0e,
	0x34, 0x67, 0x54, 0x69, 0x99, 0x3b, 0xca, 0xbf, 0x2c, 0xa5, 0x51, 0x82, 0xc8, 0x79, 0x04, 0xa0,
	0x44, 0x12, 0xdb, 0x09, 0x9d, 0x22, 0xeb, 0x4a, 0x24, 0x6f, 0x0d, 0x60, 0x0e, 0x16, 0x5b, 0x95,
	0x6e, 0xcf, 0x1d, 0x2c, 0xb6, 0x72, 0xee, 0x9f, 0xc3, 0x83, 0x84, 0x2f, 0xd2, 0x15, 0x2f, 0x3e,
	0xc4, 0x05, 0xd5, 0x3c, 0xa6, 0x79, 0x1e, 0x2f, 0xd2, 0x2c, 0xd5, 0x3c, 0x09, 0xfe, 0x54, 0x35,
	0xd3, 0x7d, 0x5a, 0x32, 0x22, 0xaa, 0x79, 0x2f, 0xcf, 0xaf, 0xac, 0xdb, 0x76, 0x19, 0x59, 0x36,
	0xbb, 0x42, 0x4b, 0x44, 0xa8, 0x96, 0xae, 0xd5, 0xe1, 0x27, 0x6a, 0x0c, 0xb3, 0xcb, 0x94, 0x0a,
	0x1a, 0x9b, 0x23, 0x78, 0xad, 0x14, 0x3a, 0x30, 0x2f, 0x74, 0x34, 0x37, 0x47, 0x1a, 0x1d, 0x01,
	0xd4, 0x96, 0x82, 0xb2, 0x5b, 0x9e, 0x04, 0x2d, 0x5b, 0x1d, 0x67, 0x9a, 0xd3, 0x6c, 0x1d, 0x6d,
	0x17, 0xca, 0xe2, 0x04, 0x8e, 0x16, 0x52, 0xe9, 0xe0, 0xc4, 0x6a, 0x1f, 0xbf, 0x77, 0x6f, 0x06,
	0x7f, 0xff, 0x66, 0x08, 0xa0, 0x36, 0xc3, 0x71, 0x5a, 0x05, 0x77, 0xad, 0xc7, 0x99, 0xe4, 0x2b,
	0x68, 0x2f, 0xa8, 0xd2, 0x71, 0x42, 0x35, 0x8d, 0x15, 0x17, 0x3a, 0x20, 0x86, 0xd0, 0x44, 0xf4,
	0x92, 0x6a, 0x3a, 0xe6, 0x02, 0x6b, 0xd2, 0x32, 0x2c, 0xd4, 0x83, 0x21, 0xdd, 0xb3, 0x9a, 0x44,
	0xb0, 0xc7, 0x6e, 0x0d, 0x67, 0x2f, 0x52, 0xc1, 0xd9, 0x2a, 0xb8, 0xbf, 0x1f, 0x29, 0xe2, 0x6c,
	0xb5, 0x17, 0xc9, 0x90, 0x3e, 0xd9, 0x8b, 0x64, 0x38, 0xf8, 0x4c, 0xc8, 0xf4, 0x32, 0xf8, 0xd4,
	0x3d, 0x13, 0x32, 0xbd, 0x24, 0x4f, 0xa0, 0x89, 0x5b, 0xa7, 0x94, 0x7e, 0x57, 0x70, 0xf5, 0x2e,
	0xf8, 0xcc, 0x1d, 0x0a, 0xb6, 0x1a, 0x3b, 0xa8, 0xbc, 0x00, 0x82, 0xbd, 0x0b, 0xa0, 0xd0, 0x7a,
	0x45, 0x8b, 0xe0, 0xc1, 0xe6, 0xaa, 0x58, 0xd1, 0x02, 0x83, 0x61, 0x81, 0x36, 0xc1, 0x3e, 0xb7,
	0xc1, 0x94, 0x48, 0x36, 0xc1, 0x1e, 0x80, 0x87, 0x14, 0x3c, 0xe0, 0xc1, 0x43, 0xbb, 0x65, 0x4a,
	0x24, 0xe1, 0x5a, 0x98, 0x92, 0xd0, 0x64, 0x85, 0x45, 0xfc, 0xc2, 0x46, 0xb5, 0x16, 0x1e, 0x8a,
	0x82, 0xcb, 0x22, 0xe1, 0x45, 0x2a, 0xe6, 0xc1, 0x23, 0xdb, 0x40, 0xb6, 0x48, 0x59, 0x7d, 0xcc,
	0xf1, 0xcb, 0x4d, 0xf5, 0xb1, 0xf5, 0x3c, 0x84, 0xba, 0x59, 0x5b, 0x8e, 0x8f, 0x91, 0xc7, 0xb6,
	0xb3, 0xe0, 0xc2, 0xd0, 0x26, 0x4f, 0xa1, 0xa5, 0xa5, 0xa6, 0x8b, 0xb8, 0x2c, 0xed, 0xa9, 0xdd,
	0x55, 0x03, 0x46, 0xae, 0xbe, 0xdb, 0xe6, 0x85, 0x7a, 0x0e, 0x9e, 0x9c, 0x56, 0xce, 0x0e, 0xcb,
	0xe6, 0x85, 0x02, 0x26, 0x5f, 0xc3, 0x49, 0x46, 0xdf, 0xc7, 0xbb, 0xa4, 0x8e, 0x21, 0xb5, 0x32,
	0xfa, 0x7e, 0xb4, 0xe5, 0x3d, 0x86, 0xc6, 0xf4, 0x83, 0xe6, 0x2a, 0xb6, 0x9a, 0x7b, 0x6a, 0xfa,
	0x26, 0x18, 0xa8, 0x67, 0x74, 0xf7, 0x0c, 0xda, 0x96, 0x50, 0x70, 0xc6, 0xd3, 0x15, 0x4f, 0x82,
	0xaf, 0x0c, 0xa7, 0x65, 0xd0, 0xc8, 0x81, 0x66, 0xfb, 0xf8, 0x5c, 0xc5, 0x72, 0xa9, 0x83, 0x67,
	0x6e, 0xfb, 0xf8, 0x5c, 0xdd, 0x2c, 0xb5, 0x39, 0x1d, 0xe8, 0x4a, 0x45, 0xf0, 0xb5, 0x93, 0x34,
	0x9f, 0xab, 0x81, 0xc0, 0x95, 0x0a, 0xa9, 0x51, 0x5e, 0xb1, 0x09, 0x16, 0x7c, 0x63, 0x57, 0xea,
	0xc0, 0x0b, 0xc4, 0x76, 0xfb, 0xf7, 0xd9, 0x5e, 0xff, 0x3e, 0x85, 0xa6, 0xd3, 0xb0, 0x8d, 0xfd,
	0x03, 0xbb, 0xff, 0x89, 0x91, 0xb0, 0x89, 0xdf, 0x81, 0xd6, 0x96, 0x81, 0x89, 0x3d, 0xb7, 0x65,
	0x2f, 0x29, 0x98, 0xdc, 0x53, 0x68, 0xed, 0xb5, 0x86, 0xe0, 0x85, 0x59, 0x5d, 0x73, 0xb7, 0x1b,
	0x60, 0xbd, 0xa6, 0x4b, 0xf5, 0x21, 0xc6, 0xf7, 0x58, 0xf0, 0x43, 0x43, 0xf0, 0x10, 0x98, 0xa4,
	0x19, 0x37, 0x42, 0xc5, 0x6b, 0xa2, 0xec, 0x27, 0x3f, 0x32, 0xfe, 0x06, 0x62, 0x65, 0x0f, 0x79,
	0x06, 0x6d, 0x7b, 0x27, 0x6f, 0x48, 0x5d, 0xbb, 0x87, 0x16, 0x75, 0xb4, 0xce, 0xef, 0xa0, 0x16,
	0xf6, 0xec, 0x8d, 0x70, 0x02, 0x8d, 0x49, 0x38, 0x7a, 0x19, 0xbf, 0x1e, 0xbe, 0x1e, 0xf7, 0x2f,
	0xfd, 0x3b, 0xc4, 0x37, 0xd7, 0xcd, 0xcb, 0x38, 0xec, 0xc5, 0x37, 0x39, 0x17, 0x7e, 0x85, 0xdc,
	0x07, 0xbf, 0x44, 0x2e, 0x53, 0x65, 0x44, 0xe7, 0x1f, 0x6c, 0x06, 0x86, 0xbd, 0x38, 0x7c, 0x1b,
	0xf9, 0x47, 0xbb, 0xb4, 0x88, 0x33, 0x89, 0x6b, 0xf2, 0xbd, 0xdd, 0x70, 0x57, 0x52, 0x29, 0xdf,
	0xef, 0xfc, 0x1e, 0x6a, 0x37, 0xee, 0x82, 0x68, 0x03, 0xdc, 0x8c, 0x26, 0xdb, 0xb9, 0x09, 0xb4,
	0xd1, 0x9e, 0x0c, 0xae, 0xfb, 0xe3, 0x49, 0xef, 0x7a, 0x34, 0xf6, 0x2b, 0xa4, 0x09, 0x1e, 0x62,
	0xe3, 0x5e, 0xf8, 0x0b, 0xff, 0xa0, 0x1c, 0xf1, 0x76, 0x1c, 0xf6, 0xae, 0xfa, 0xfe, 0x11, 0x69,
	0x40, 0x0d, 0xed, 0x7e, 0x38, 0xb4, 0x73, 0x39, 0x23, 0x1e, 0xf7, 0xfb, 0x43, 0xdf, 0x2f, 0x91,
	0xf1, 0xaf, 0x86, 0xf1, 0x65, 0x6f, 0xd2, 0xf3, 0x4f, 0x3b, 0xff, 0x39, 0x84, 0x7b, 0x93, 0x70,
	0x84, 0x8f, 0x68, 0x21, 0x95, 0x4e, 0x99, 0xb2, 0xb7, 0xea, 0x4f, 0xa0, 0x95, 0x0a, 0xae, 0xe3,
	0x24, 0xa5, 0xf3, 0x38, 0x53, 0x73, 0xf7, 0x37, 0x70, 0xf7, 0xa3, 0x27, 0x77, 0xd4, 0x48, 0xb7,
	0x08, 0xe9, 0x42, 0xcb, 0x8c, 0x30, 0x7f, 0x24, 0x4c, 0x2e, 0x36, 0x2f, 0xee, 0x91, 0x03, 0xa2,
	0x26, 0xfa, 0x4b, 0x8b, 0x7c, 0x0b, 0xf7, 0x99, 0x14, 0x73, 0xfc, 0x5f, 0x90, 0x22, 0xa6, 0x8b,
	0xb9, 0x2c, 0x52, 0xfd, 0xce, 0x3e, 0x3e, 0xea, 0xd1, 0xbd, 0xad, 0xaf, 0x57, 0xba, 0xc8, 0x73,
	0x38, 0x5e, 0xe1, 0x3b, 0xd5, 0x5c, 0xc8, 0xf8, 0xf2, 0xfe, 0xe8, 0xe1, 0xfa, 0xea, 0x4e, 0x64,
	0x29, 0xe4, 0x1b, 0x38, 0x4e, 0x98, 0x66, 0xb9, 0x7b, 0xa5, 0x9f, 0x74, 0xf7, 0x5f, 0xa3, 0x48,
	0x34, 0x7e, 0xf2, 0x1c, 0xbc, 0xe9, 0xb4, 0x88, 0x53, 0x31, 0x93, 0xe6, 0xd6, 0x6e, 0x9c, 0xb7,
	0xba, 0xbb, 0xaf, 0x9b, 0x57, 0x77, 0xa2, 0xda, 0x74, 0x5a, 0xa0, 0x4d, 0xce, 0x01, 0x94, 0x79,
	0x62, 0xc6, 0xe5, 0x23, 0xad, 0x71, 0x7e, 0xaf, 0xfb, 0xf1, 0xab, 0x33, 0xaa, 0xab, 0x12, 0x23,
	0x67, 0xe0, 0xe1, 0xa3, 0xcf, 0xc4, 0xf7, 0x5c, 0xfc, 0x3d, 0x6e, 0x2d, 0xb3, 0x16, 0x32, 0x35,
	0xcb, 0x2d, 0xb3, 0xee, 0x98, 0xbb, 0x39, 0x47, 0x35, 0xcd, 0x72, 0xc3, 0x7c, 0x06, 0x2d, 0xf5,
	0x6e, 0xa9, 0x13, 0xb9, 0x16, 0x71, 0x46, 0xd5, 0xad, 0xbd, 0x18, 0x5f, 0x55, 0xa2, 0x66, 0x09,
	0x5f, 0x53, 0x75, 0x7b, 0x51, 0x87, 0x1a, 0x63, 0x26, 0xde, 0x05, 0x80, 0x57, 0xba, 0x9e, 0xff,
	0xb9, 0x02, 0x5e, 0xf9, 0x52, 0x42, 0xd9, 0x0c, 0x86, 0x6f, 0x7a, 0x57, 0x03, 0x54, 0xdd, 0x09,
	0x34, 0x50, 0x6e, 0x17, 0x57, 0x83, 0xf1, 0xab, 0xfe, 0xa5, 0x95, 0x1c, 0x2a, 0x66, 0xdc, 0x1f,
	0xe2, 0x5f, 0x83, 0xb3, 0xa2, 0x7e, 0xf8, 0xc6, 0x3f, 0x24, 0x2d, 0xa8, 0xbf, 0x1c, 0x0c, 0xe3,
	0xb7, 0xbd, 0xc1, 0xe4, 0x5b, 0xff, 0x68, 0xd7, 0x3c, 0xf7, 0x8f, 0xd1, 0x44, 0xf1, 0x1a, 0xdb,
	0xaf, 0xe2, 0x0f, 0x47, 0x78, 0x75, 0x33, 0xee, 0xfb, 0x35, 0x14, 0xae, 0xf9, 0xb4, 0x2e, 0x0f,
	0xa3, 0x5e, 0xf5, 0xc6, 0x93, 0x18, 0x65, 0x5d, 0xc7, 0xff, 0x95, 0xab, 0xc1, 0x78, 0xd2, 0x1f,
	0xfa, 0x80, 0xb9, 0x21, 0x73, 0x30, 0xfc, 0xde, 0x6f, 0x3c, 0x8f, 0xc0, 0xdb, 0x68, 0x87, 0x40,
	0x7b, 0x30, 0x1a, 0x45, 0x37, 0x93, 0x9b, 0xed, 0x89, 0x39, 0x81, 0x46, 0x89, 0x4d, 0xc2, 0x91,
	0x5f, 0xdd, 0x05, 0x5e, 0x5f, 0x8e, 0xfc, 0xbb, 0x78, 0x04, 0x4a, 0xe0, 0x32, 0x0c, 0x47, 0xfe,
	0x93, 0x8b, 0xe3, 0x5f, 0x1f, 0x6a, 0x96, 0x4f, 0xab, 0x46, 0xb3, 0xdf, 0xfd, 0x37, 0x00, 0x00,
	0xff, 0xff, 0xec, 0x8d, 0xd5, 0x6a, 0x53, 0x0f, 0x00, 0x00,
}
